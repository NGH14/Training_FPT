// <auto-generated />
using System;
using FPT.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FPT.Data.Migrations
{
    [DbContext(typeof(EShopDbContext))]
    [Migration("20210913103243_testing")]
    partial class testing
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FPT.Data.Entities.AppConfig", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("AppConfigs");

                    b.HasData(
                        new
                        {
                            Key = "HomeTitle",
                            Value = "This is home page of FPT"
                        },
                        new
                        {
                            Key = "HomeKeyword",
                            Value = "This is keyword of FPT"
                        },
                        new
                        {
                            Key = "HomeDescription",
                            Value = "This is description of FPT"
                        });
                });

            modelBuilder.Entity("FPT.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12bd354f-9101-45ca-b5b7-da3f325983dc"),
                            ConcurrencyStamp = "869ee561-54b2-4bc3-8489-9535485f7b16",
                            Description = "Trainer role",
                            Name = "Trainer",
                            NormalizedName = "Trainer"
                        },
                        new
                        {
                            Id = new Guid("17d4acf8-1131-b5b7-1100-aa6f321543ba"),
                            ConcurrencyStamp = "9260a1f6-1226-48a7-aa46-9feca7168af5",
                            Description = "Trainee role",
                            Name = "Trainee",
                            NormalizedName = "Trainee"
                        },
                        new
                        {
                            Id = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            ConcurrencyStamp = "2d929111-4ceb-4107-8810-a2615ac2c77d",
                            Description = "Administrator role",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        });
                });

            modelBuilder.Entity("FPT.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5630169d-ea3f-4973-bc5d-e8d013b88ff6",
                            Dob = new DateTime(2001, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fptadmin@fpt.staff.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Vu Huu",
                            LockoutEnabled = false,
                            NormalizedEmail = "fptadmin@fpt.staff.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEM3tQMNWsgLQwvqlnDOAAOv1Y/Q4c+z5ybd23AkOgnb8nPm1MJIz+6z1YqhU6h9P0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("1710dce2-969a-435d-bba4-df3f325983dc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4bb17a54-b40c-4c9d-b531-6673f43ebd6d",
                            Dob = new DateTime(2001, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "NghiaVHGCS190654@fpt.edu.com",
                            EmailConfirmed = true,
                            FirstName = "Nghia",
                            LastName = "Vu",
                            LockoutEnabled = false,
                            NormalizedEmail = "NghiaVHGCS190654@fpt.edu.com",
                            NormalizedUserName = "Nghia",
                            PasswordHash = "AQAAAAEAACcQAAAAEHjOlOAWUAqU/lCwZzG7TxomwxQ5QqS7FJDqTFbzOKQ3KBDoFJASbGl1nqTqHiFSOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Nghiavuhuu"
                        },
                        new
                        {
                            Id = new Guid("ad80dce2-969a-1313-bba4-8d89325983dc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e83c78f5-3744-4574-a8c9-b8eb22f9c5e3",
                            Dob = new DateTime(1997, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "NhanVGBS1588@fpt.staff.com",
                            EmailConfirmed = true,
                            FirstName = "Nhan",
                            LastName = "Van",
                            LockoutEnabled = false,
                            NormalizedEmail = "NhanVGBS1588@fpt.staff.com",
                            NormalizedUserName = "Nhan",
                            PasswordHash = "AQAAAAEAACcQAAAAEH9K5QZNx5owJZyGlEboWZlLybadxCJa9JKvitCX0VTo9cADnSO1BrbPT5qIRpsyRA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "NhanVan"
                        });
                });

            modelBuilder.Entity("FPT.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsShowOnHome")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsShowOnHome = true,
                            SortOrder = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            IsShowOnHome = true,
                            SortOrder = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            IsShowOnHome = true,
                            SortOrder = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            IsShowOnHome = true,
                            SortOrder = 5,
                            Status = 1
                        });
                });

            modelBuilder.Entity("FPT.Data.Entities.CategoryTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SeoAlias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CategoryTranslations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            LanguageId = "vi",
                            Name = "Kĩ năng thuyết trình"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            LanguageId = "en",
                            Name = "Presentation skills"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            LanguageId = "vi",
                            Name = "Đào tạo ASP.NET CORE 101"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            LanguageId = "en",
                            Name = "ASP.NET Core Training 101"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            LanguageId = "vi",
                            Name = "Đào Tạo Trình Soạn Thảo CKEditor"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            LanguageId = "en",
                            Name = "CKEditor Training 102"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            LanguageId = "vi",
                            Name = "Workshop: Code less, engineer more"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            LanguageId = "en",
                            Name = "Workshop: Code less, engineer more"
                        });
                });

            modelBuilder.Entity("FPT.Data.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("FPT.Data.Entities.Language", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = "vi",
                            IsDefault = false,
                            Name = "Tiếng Việt"
                        },
                        new
                        {
                            Id = "en",
                            IsDefault = true,
                            Name = "English"
                        });
                });

            modelBuilder.Entity("FPT.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsFeatured")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2021, 9, 13, 17, 32, 42, 376, DateTimeKind.Local).AddTicks(1502)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2021, 9, 13, 17, 32, 42, 377, DateTimeKind.Local).AddTicks(2718)
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2021, 9, 13, 17, 32, 42, 377, DateTimeKind.Local).AddTicks(2782)
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2021, 9, 13, 17, 32, 42, 377, DateTimeKind.Local).AddTicks(2809)
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2021, 9, 13, 17, 32, 42, 377, DateTimeKind.Local).AddTicks(2832)
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2021, 9, 13, 17, 32, 42, 377, DateTimeKind.Local).AddTicks(2855)
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2021, 9, 13, 17, 32, 42, 377, DateTimeKind.Local).AddTicks(2875)
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2021, 9, 13, 17, 32, 42, 377, DateTimeKind.Local).AddTicks(2895)
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2021, 9, 13, 17, 32, 42, 377, DateTimeKind.Local).AddTicks(2917)
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2021, 9, 13, 17, 32, 42, 377, DateTimeKind.Local).AddTicks(2940)
                        });
                });

            modelBuilder.Entity("FPT.Data.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("FPT.Data.Entities.ProductInCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductInCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            ProductId = 2
                        },
                        new
                        {
                            CategoryId = 3,
                            ProductId = 3
                        });
                });

            modelBuilder.Entity("FPT.Data.Entities.ProductTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrainerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainingTypes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductTranslations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Căn hộ số 3 - Trường Sa -Phường 2 - Quận Phú Nhuận -TPHCM",
                            Description = "Cải thiện kĩ năng thuyết trình",
                            Details = "Mục tiêu bài thuyết trình của bạn nên là một trong những ý sau: Để chia sẻ một số thông tin Để dạy một điều gì đó. Để giải trí.Để giải thích và giải quyết một vấn đềĐiều quan trọng nhất là khán giả của bạn nghe được những gì, vì vậy,bạn phải cân nhắc cẩn thận bạn nên nói những gì và bạn nên nói như thế nào.Mọi người không thể liên tục tập trung trong một khoảng thời gian dài.Bạn nên chia ra những phần nhỏ và mỗi phần khoảng 15 phút.Bạn cũng nên có phần thảo luận, câu hỏi hoặc hoạt động ngắn giữa những đoạn nói đó.",
                            End = new DateTime(2021, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = "vi",
                            Name = "Tập trung vào mục tiêu",
                            ProductId = 1,
                            Start = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainerEmail = "NhanVGBS1588@fpt.staff.com",
                            TrainingTypes = "Tại Cơ Sở"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Apartment No.3 - Truong Sa Street - Ward 2 - Phu NHuan District - Ho Chi Minh City",
                            Description = "Improve Presentation Skill",
                            Details = "You should make a presentation with the following objective: To share some information To teach something. For fun.To explain and solve a problem. Cannot focus continuously for a long period of time. It is recommended that you divide it into small parts and each section is about 15 minutes. You should also have a discussion, question or short activity in between the speeches.",
                            End = new DateTime(2021, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = "en",
                            Name = "Focus on objectives",
                            ProductId = 1,
                            Start = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainerEmail = "NhanVGBS1588@fpt.staff.com",
                            TrainingTypes = "Offline"
                        });
                });

            modelBuilder.Entity("FPT.Data.Entities.Slide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Slides");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/1.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 1,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/2.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 2,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/3.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 3,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/4.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 4,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/5.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 5,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/6.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 6,
                            Status = 1,
                            Url = "#"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            RoleId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de")
                        },
                        new
                        {
                            UserId = new Guid("1710dce2-969a-435d-bba4-df3f325983dc"),
                            RoleId = new Guid("17d4acf8-1131-b5b7-1100-aa6f321543ba")
                        },
                        new
                        {
                            UserId = new Guid("ad80dce2-969a-1313-bba4-8d89325983dc"),
                            RoleId = new Guid("12bd354f-9101-45ca-b5b7-da3f325983dc")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("FPT.Data.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("FPT.Data.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPT.Data.Entities.Language", "Language")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FPT.Data.Entities.ProductImage", b =>
                {
                    b.HasOne("FPT.Data.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FPT.Data.Entities.ProductInCategory", b =>
                {
                    b.HasOne("FPT.Data.Entities.Category", "Category")
                        .WithMany("ProductInCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPT.Data.Entities.Product", "Product")
                        .WithMany("ProductInCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FPT.Data.Entities.ProductTranslation", b =>
                {
                    b.HasOne("FPT.Data.Entities.Language", "Language")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPT.Data.Entities.Product", "Product")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
