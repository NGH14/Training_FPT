// <auto-generated />
using System;
using FPT.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FPT.Data.Migrations
{
    [DbContext(typeof(EShopDbContext))]
    [Migration("20210916135850_updateRoleHR")]
    partial class updateRoleHR
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FPT.Data.Entities.AppConfig", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("AppConfigs");

                    b.HasData(
                        new
                        {
                            Key = "HomeTitle",
                            Value = "This is home page of FPT"
                        },
                        new
                        {
                            Key = "HomeKeyword",
                            Value = "This is keyword of FPT"
                        },
                        new
                        {
                            Key = "HomeDescription",
                            Value = "This is description of FPT"
                        });
                });

            modelBuilder.Entity("FPT.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12bd354f-9101-45ca-b5b7-da3f325983dc"),
                            ConcurrencyStamp = "fe2ccb55-7eef-4598-9ae8-76ab0c8c7cf4",
                            Description = "Training Analyst role",
                            Name = "Training Analyst",
                            NormalizedName = "Training Analyst"
                        },
                        new
                        {
                            Id = new Guid("17d4acf8-1131-b5b7-1100-aa6f321543ba"),
                            ConcurrencyStamp = "e3dd011d-86ce-4f07-90ec-e4799366e713",
                            Description = "FPT Staff role",
                            Name = "FPT Staff",
                            NormalizedName = "FPT Staff"
                        },
                        new
                        {
                            Id = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            ConcurrencyStamp = "17a2462d-d61a-4187-be18-fc136ac2bb43",
                            Description = "Administrator role",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("074bc203-87c9-4dc6-883e-4800b5e9d4eb"),
                            ConcurrencyStamp = "26bd670a-fa40-452d-ad6f-cc60b734e90f",
                            Description = "Human Resources role",
                            Name = "Human Resources",
                            NormalizedName = "Human Resources"
                        });
                });

            modelBuilder.Entity("FPT.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e61d57e7-d7f2-44ac-aaba-326f437dc51b",
                            Dob = new DateTime(2001, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fptadmin@fpt.staff.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Vu Huu",
                            LockoutEnabled = false,
                            NormalizedEmail = "fptadmin@fpt.staff.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEFXVnbsjh2fqiCnneVfMlbvG+CJa9AmsMHEqRfU4OiOuWerxpgttZCu98gmBSr5DSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("1710dce2-969a-435d-bba4-df3f325983dc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a2b6756-de00-4138-bc3f-71d9ea9a4149",
                            Dob = new DateTime(2001, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "NghiaVHGCS190654@fpt.edu.com",
                            EmailConfirmed = true,
                            FirstName = "Nghia",
                            LastName = "Vu",
                            LockoutEnabled = false,
                            NormalizedEmail = "NghiaVHGCS190654@fpt.edu.com",
                            NormalizedUserName = "Nghia",
                            PasswordHash = "AQAAAAEAACcQAAAAEMioo7Fh1bkInONwPdD/LoN4/KRY6tvpC+ts4/E8I9EgWUBVYLICSeRHyNDh9SaE0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Nghiavuhuu"
                        },
                        new
                        {
                            Id = new Guid("1a84dce2-123a-435d-bba4-df3f325983dc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35e5e5e0-eb8c-49ab-840c-d6d8a3bd9c56",
                            Dob = new DateTime(2001, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "BaoNguyenLeVHGCS190654@fpt.edu.com",
                            EmailConfirmed = true,
                            FirstName = "Bao",
                            LastName = "Le",
                            LockoutEnabled = false,
                            NormalizedEmail = "BaoNguyenLeVHGCS190654@fpt.edu.com",
                            NormalizedUserName = "Bao",
                            PasswordHash = "AQAAAAEAACcQAAAAEPt0Hflm/E67ZXJp79dWRCDCLGupTRfTYdyZ+WJ72GMElvZXfhsYGhDhGylcEdRvIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "BaoNguyenLe"
                        },
                        new
                        {
                            Id = new Guid("ad80dce2-969a-1313-bba4-8d89325983dc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "41f8c01b-457a-4b66-9ac4-a66ef239e68b",
                            Dob = new DateTime(1997, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "NhanVGBS1588@fpt.staff.com",
                            EmailConfirmed = true,
                            FirstName = "Nhan",
                            LastName = "Van",
                            LockoutEnabled = false,
                            NormalizedEmail = "NhanVGBS1588@fpt.staff.com",
                            NormalizedUserName = "Nhan",
                            PasswordHash = "AQAAAAEAACcQAAAAEGPM+53vvq42+QwEPOX5N4yd6+YIaPoepxituW5Bu+I8m8H5nogNC7Xik00ge6Q8mw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "NhanVan"
                        },
                        new
                        {
                            Id = new Guid("c1e71b9a-7aae-4f7c-9ab9-b9e52d1ef6da"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9435769b-a773-49f0-beb0-d18bc9042b9f",
                            Dob = new DateTime(1998, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "DuyNguyenDalat@fpt.staff.com",
                            EmailConfirmed = true,
                            FirstName = "Duy",
                            LastName = "Nguyen",
                            LockoutEnabled = false,
                            NormalizedEmail = "DuyNguyenDalat@fpt.staff.com",
                            NormalizedUserName = "Duy",
                            PasswordHash = "AQAAAAEAACcQAAAAEL/DKmyvss8AB9eogV5COToKB478uka912Mls5GOlr0Cyf6dUEdmqEIDuI3v86q00Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "DuyDallat34"
                        });
                });

            modelBuilder.Entity("FPT.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsShowOnHome")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsShowOnHome = true,
                            SortOrder = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            IsShowOnHome = true,
                            SortOrder = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            IsShowOnHome = true,
                            SortOrder = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            IsShowOnHome = true,
                            SortOrder = 5,
                            Status = 1
                        });
                });

            modelBuilder.Entity("FPT.Data.Entities.CategoryTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SeoAlias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CategoryTranslations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            LanguageId = "vi",
                            Name = "Kĩ năng thuyết trình"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            LanguageId = "en",
                            Name = "Presentation skills"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            LanguageId = "vi",
                            Name = "Đào tạo ASP.NET CORE 101"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            LanguageId = "en",
                            Name = "ASP.NET Core Training 101"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            LanguageId = "vi",
                            Name = "Workshop: Code less, engineer more"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            LanguageId = "en",
                            Name = "Workshop: Code less, engineer more"
                        });
                });

            modelBuilder.Entity("FPT.Data.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("FPT.Data.Entities.Language", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = "vi",
                            IsDefault = false,
                            Name = "Tiếng Việt"
                        },
                        new
                        {
                            Id = "en",
                            IsDefault = true,
                            Name = "English"
                        });
                });

            modelBuilder.Entity("FPT.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsFeatured")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2021, 9, 16, 20, 58, 49, 362, DateTimeKind.Local).AddTicks(6521)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2021, 9, 16, 20, 58, 49, 363, DateTimeKind.Local).AddTicks(6744)
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2021, 9, 16, 20, 58, 49, 363, DateTimeKind.Local).AddTicks(6802)
                        });
                });

            modelBuilder.Entity("FPT.Data.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("FPT.Data.Entities.ProductInCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductInCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            ProductId = 2
                        },
                        new
                        {
                            CategoryId = 3,
                            ProductId = 3
                        });
                });

            modelBuilder.Entity("FPT.Data.Entities.ProductTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrainerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainingTypes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductTranslations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Căn hộ số 3 - Trường Sa -Phường 2 - Quận Phú Nhuận -TPHCM",
                            Description = "Cải thiện kỹ năng thuyết trình của bạn là rất quan trọng bởi vì bài thuyết trình của bạn càng đáng nhớ, có tác động và hiệu quả, thì cả bạn và khán giả của bạn sẽ càng nhận được nhiều kinh nghiệm học tập và chia sẻ của một cuộc họp, bài giảng hoặc hội thảo (hoặc bất kỳ điều gì khác mà bài thuyết trình của bạn)",
                            Details = "Mục tiêu bài thuyết trình của bạn nên là một trong những ý sau: Để chia sẻ một số thông tin Để dạy một điều gì đó. Để giải trí.Để giải thích và giải quyết một vấn đềĐiều quan trọng nhất là khán giả của bạn nghe được những gì, vì vậy,bạn phải cân nhắc cẩn thận bạn nên nói những gì và bạn nên nói như thế nào.Mọi người không thể liên tục tập trung trong một khoảng thời gian dài.Bạn nên chia ra những phần nhỏ và mỗi phần khoảng 15 phút.Bạn cũng nên có phần thảo luận, câu hỏi hoặc hoạt động ngắn giữa những đoạn nói đó.",
                            End = new DateTime(2021, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = "vi",
                            Name = "Tập trung vào mục tiêu",
                            ProductId = 1,
                            Start = new DateTime(2021, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainerEmail = "NhanVGBS1588@fpt.staff.com",
                            TrainingTypes = "Tại Cơ Sở"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Apartment No.3 - Truong Sa Street - Ward 2 - Phu NHuan District - Ho Chi Minh City",
                            Description = "Improving your presentation skills is important because the more memorable, impactful, and effective your presentations are, the more both you and your audience will get out of the learning and sharing experience of a meeting, lecture, or workshop (or whatever else your presentation is for)",
                            Details = "You should make a presentation with the following objective: To share some information To teach something. For fun.To explain and solve a problem. Cannot focus continuously for a long period of time. It is recommended that you divide it into small parts and each section is about 15 minutes. You should also have a discussion, question or short activity in between the speeches.",
                            End = new DateTime(2021, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = "en",
                            Name = "Focus on objectives",
                            ProductId = 1,
                            Start = new DateTime(2021, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainerEmail = "NhanVGBS1588@fpt.staff.com",
                            TrainingTypes = "Offline"
                        },
                        new
                        {
                            Id = 3,
                            Address = "https://meet.google.com/ffy-huvy-cjg",
                            Description = "Trong hướng dẫn này, bạn học cách: Tạo một dự án API web. Thêm một lớp mô hình và một ngữ cảnh cơ sở dữ liệu. Scaffold một bộ điều khiển với các phương pháp CRUD. Định cấu hình định tuyến, đường dẫn URL và giá trị trả về. Gọi API web bằng Postman.",
                            Details = "Kiểu trả về của phương thức GetTodoItems và GetTodoItem là kiểu ActionResult <T>. ASP.NET Core tự động tuần tự hóa đối tượng thành JSON và ghi JSON vào phần nội dung của thông báo phản hồi. Mã phản hồi cho kiểu trả về này là 200 OK, giả sử không có ngoại lệ nào được xử lý. Các ngoại lệ chưa được xử lý được chuyển thành lỗi 5xx.",
                            End = new DateTime(2021, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = "vi",
                            Name = "Hướng dẫn: Tạo một API web với ASP.NET Core",
                            ProductId = 2,
                            Start = new DateTime(2021, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainerEmail = "NamLam@fpt.staff.com",
                            TrainingTypes = "Trực tuyến"
                        },
                        new
                        {
                            Id = 4,
                            Address = "https://meet.google.com/ffy-huvy-cjg",
                            Description = "In this tutorial, you learn how to:  Create a web API project. Add a model class and a database context.     Scaffold a controller with CRUD methods. Configure routing, URL paths, and return values. Call the web API with Postman.",
                            Details = "The return type of the GetTodoItems and GetTodoItem methods is ActionResult<T> type. ASP.NET Core automatically serializes the object to JSON and writes the JSON into the body of the response message. The response code for this return type is 200 OK, assuming there are no unhandled exceptions. Unhandled exceptions are translated into 5xx errors.",
                            End = new DateTime(2022, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = "en",
                            Name = "Tutorial: Create a web API with ASP.NET Core",
                            ProductId = 2,
                            Start = new DateTime(2021, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainerEmail = "NamLam8@fpt.staff.com",
                            TrainingTypes = "Online"
                        },
                        new
                        {
                            Id = 5,
                            Address = "https://meet.google.com/ffy-huvy-cjg",
                            Description = "Với tư cách là kỹ sư, chúng tôi thiết kế và xây dựng giải pháp cho các vấn đề mà doanh nghiệp của chúng tôi gặp phải. Viết mã của riêng chúng tôi thường là một phần của câu trả lời. Nhưng cũng như chúng tôi sẽ không khăng khăng rằng mọi cây cầu phải được xây dựng bằng dầm và bu lông đặt riêng, hoặc tất cả phích cắm và ổ cắm điện đều có các yếu tố hình thức riêng, chúng ta không nên khăng khăng xây dựng tùy chỉnh từng phần của thiết kế mà chúng ta tạo ra. Thay vào đó, chúng ta nên tập trung năng lượng hữu hạn của nhóm vào những nơi mà chúng có thể mang lại giá trị độc đáo . Nếu chúng ta thưởng cho các nhóm và cá nhân vì đã phát minh lại bánh xe thay vì tái sử dụng một cách thông minh các thành phần hiện có, chúng ta đang tự đưa mình vào những nỗ lực thủ công, tốn kém hơn là các nền tảng được chia sẻ hiệu quả",
                            Details = "Các nhóm hiệu quả viết ít phần mềm hơn và viết ít phần mềm hơn cho phép các nhóm làm việc hiệu quả hơn. Thoạt nghe, điều này nghe có vẻ phản trực giác: Không phải tất cả chúng ta ở đây đều là kỹ sư viết phần mềm sao? Năng suất của chúng ta không được đo bằng các dòng mã sao? Để xua tan ảo tưởng này, chúng ta cần dừng việc nhầm lẫn đôi khi chúng ta làm gì với lý do tại sao. Với tư cách là kỹ sư, chúng tôi thiết kế và xây dựng các giải pháp cho các vấn đề mà doanh nghiệp của chúng tôi gặp phải. Viết mã của riêng chúng ta thường là một phần của câu trả lời. Nhưng cũng như chúng tôi sẽ không khăng khăng rằng mọi cây cầu đều được xây dựng bằng dầm và bu lông đặt riêng hoặc tất cả các phích cắm và ổ cắm điện đều có kiểu dáng riêng, chúng tôi không nên nhấn mạnh vào việc xây dựng theo yêu cầu của từng bộ phận của thiết kế mà chúng tôi chế tạo. Thay vào đó, chúng ta nên tập trung năng lượng hữu hạn của nhóm vào những nơi mà họ có thể mang lại giá trị độc đáo. Nếu chúng tôi thưởng cho các nhóm và cá nhân vì đã phát minh lại bánh xe thay vì tái sử dụng một cách thông minh các thành phần hiện có, chúng tôi đang tự mình hướng tới những nỗ lực thủ công, tốn kém hơn là các nền tảng được chia sẻ hiệu quả.",
                            End = new DateTime(2021, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = "vi",
                            Name = "Lập Trình như là Kỹ Sư Phần Mềm",
                            ProductId = 3,
                            Start = new DateTime(2020, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainerEmail = "NamLam@fpt.staff.com",
                            TrainingTypes = "Trực tuyến"
                        },
                        new
                        {
                            Id = 6,
                            Address = "https://meet.google.com/ffy-huvy-cjg",
                            Description = "As engineers, we design and build solutions to the problems that our businesses face. Writing code of our own is often part of the answer. But just as we wouldn’t insist that every bridge be built with bespoke girders and bolts, or that all electrical plugs and sockets have their own form factors, we shouldn’t insist on custom-building every part of the designs that we craft. Instead, we should focus our teams’ finite energy on the places where they can deliver unique value. If we reward teams and individuals for reinventing the wheel rather than for the smart reuse of existing components, we’re dooming ourselves to costly, artisanal efforts rather than efficient shared platforms.",
                            Details = "Effective teams write less software, and writing less software enables teams to be more effective. This may sound counterintuitive at first: Aren’t we all here as engineers to write software? Isn’t our productivity measured in lines of code? To dispel this illusion, we need to stop conflating what we sometimes do with why.  As engineers, we design and build solutions to the problems that our businesses face. Writing code of our own is often part of the answer. But just as we wouldn’t insist that every bridge be built with bespoke girders and bolts, or that all electrical plugs and sockets have their own form factors, we shouldn’t insist on custom-building every part of the designs that we craft. Instead, we should focus our teams’ finite energy on the places where they can deliver unique value. If we reward teams and individuals for reinventing the wheel rather than for the smart reuse of existing components, we’re dooming ourselves to costly, artisanal efforts rather than efficient shared platforms. Build what you must, buy what you can, and write it all down When we’re building something new, our work starts with mapping out an overall strategy, with an understanding of the organization’s context and needs, and writing the pieces that we must create ourselves. As the project progresses, we identify appropriate vendors and suppliers for the pieces we think are more efficient to purchase off the shelf than to build from scratch. The work ends with integrating all of these components into solutions for our customers. And since engineering is a continuous rather than one-time process, we ought to document our decisions for future maintainability, and to share what we’ve learned within our organizations and our broader communities.",
                            End = new DateTime(2021, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = "en",
                            Name = "Code less, engineer more",
                            ProductId = 3,
                            Start = new DateTime(2020, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainerEmail = "NamLam@fpt.staff.com",
                            TrainingTypes = "Online"
                        });
                });

            modelBuilder.Entity("FPT.Data.Entities.Slide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Slides");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/1.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 1,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/2.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 2,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/3.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 3,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/4.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 4,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/5.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 5,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/6.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 6,
                            Status = 1,
                            Url = "#"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            RoleId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de")
                        },
                        new
                        {
                            UserId = new Guid("1710dce2-969a-435d-bba4-df3f325983dc"),
                            RoleId = new Guid("17d4acf8-1131-b5b7-1100-aa6f321543ba")
                        },
                        new
                        {
                            UserId = new Guid("ad80dce2-969a-1313-bba4-8d89325983dc"),
                            RoleId = new Guid("12bd354f-9101-45ca-b5b7-da3f325983dc")
                        },
                        new
                        {
                            UserId = new Guid("1a84dce2-123a-435d-bba4-df3f325983dc"),
                            RoleId = new Guid("17d4acf8-1131-b5b7-1100-aa6f321543ba")
                        },
                        new
                        {
                            UserId = new Guid("c1e71b9a-7aae-4f7c-9ab9-b9e52d1ef6da"),
                            RoleId = new Guid("074bc203-87c9-4dc6-883e-4800b5e9d4eb")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("FPT.Data.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("FPT.Data.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPT.Data.Entities.Language", "Language")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FPT.Data.Entities.ProductImage", b =>
                {
                    b.HasOne("FPT.Data.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FPT.Data.Entities.ProductInCategory", b =>
                {
                    b.HasOne("FPT.Data.Entities.Category", "Category")
                        .WithMany("ProductInCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPT.Data.Entities.Product", "Product")
                        .WithMany("ProductInCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FPT.Data.Entities.ProductTranslation", b =>
                {
                    b.HasOne("FPT.Data.Entities.Language", "Language")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPT.Data.Entities.Product", "Product")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
